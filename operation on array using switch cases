#include <iostream>

using namespace std;

// Function prototypes
void traverseArray(const int arr[], int size);
void searchElement(const int arr[], int size, int key);
void deleteElement(int arr[], int &size, int key);
void bubbleSort(int arr[], int size);
void insertElement(int arr[], int &size, int key, int position);

int main() {
    const int MAX_SIZE = 100; // Maximum size of the array
    int arr[MAX_SIZE];
    int size = 0;
    int choice, key, position;

    while (true) {
        cout << "\nMenu:\n";
        cout << "1. Traverse Array\n";
        cout << "2. Search Element\n";
        cout << "3. Delete Element\n";
        cout << "4. Sort Array\n";
        cout << "5. Insert Element\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                traverseArray(arr, size);
                break;
            case 2:
                cout << "Enter element to search: ";
                cin >> key;
                searchElement(arr, size, key);
                break;
            case 3:
                cout << "Enter element to delete: ";
                cin >> key;
                deleteElement(arr, size, key);
                break;
            case 4:
                bubbleSort(arr, size);
                cout << "Array sorted.\n";
                break;
            case 5:
                if (size >= MAX_SIZE) {
                    cout << "Array is full. Cannot insert element.\n";
                } else {
                    cout << "Enter element to insert: ";
                    cin >> key;
                    cout << "Enter position to insert (0-based index): ";
                    cin >> position;
                    if (position >= 0 && position <= size) {
                        insertElement(arr, size, key, position);
                    } else {
                        cout << "Invalid position.\n";
                    }
                }
                break;
            case 6:
                cout << "Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }
}

void traverseArray(const int arr[], int size) {
    if (size == 0) {
        cout << "Array is empty.\n";
    } else {
        cout << "Array elements: ";
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
}

void searchElement(const int arr[], int size, int key) {
    bool found = false;
    for (int i = 0; i < size; i++) {
        if (arr[i] == key) {
            cout << "Element " << key << " found at index " << i << ".\n";
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "Element " << key << " not found.\n";
    }
}

void deleteElement(int arr[], int &size, int key) {
    int i;
    for (i = 0; i < size; i++) {
        if (arr[i] == key) {
            break;
        }
    }
    if (i == size) {
        cout << "Element " << key << " not found.\n";
    } else {
        for (int j = i; j < size - 1; j++) {
            arr[j] = arr[j + 1];
        }
        size--;
        cout << "Element " << key << " deleted.\n";
    }
}

void bubbleSort(int arr[], int size) {
    bool swapped;
    for (int i = 0; i < size - 1; i++) {
        swapped = false;
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                swapped = true;
            }
        }
        // If no two elements were swapped by inner loop, then break
        if (!swapped) {
            break;
        }
    }
}

void insertElement(int arr[], int &size, int key, int position) {
    if (size >= MAX_SIZE) {
        cout << "Array is full. Cannot insert element.\n";
        return;
    }
    if (position < 0 || position > size) {
        cout << "Invalid position.\n";
        return;
    }
    // Shift elements to the right to make space for new element
    for (int i = size; i > position; i--) {
        arr[i] = arr[i - 1];
    }
    arr[position] = key;
    size++;
    cout << "Element " << key << " inserted at position " << position << ".\n";
}
