//You are given an array of elements. Now you need to choose the best index of this array. An index of the array is called best if the special sum of this index is maximum across the special sum of all the other indices. To 
//calculate the special sum for any index you pick the first element that is and add it to your sum. Now you pick next two elements i.e., and and add both of them to your sum. Now you will pick the next elements, and this continues 
//till the index for which it is possible to pick the elements. Find the best index and in the output print its corresponding special sum. Note that there may be more than one best index, but you need to only print the maximum special 
//sum. 
//Input 
//First line contains an integer as input. Next line contains space separated 
//integers   denoting   the   elements   of   the   array Output 
//In the output you have to print an integer that denotes the maximum special 
//sum 










#include <iostream>
#include <climits>

using namespace std;

int findBestIndex(int arr[], int n) {
    int maxSpecialSum = INT_MIN;
    int bestIndex = -1;

    for (int i = 0; i < n; i++) {
        int specialSum = 0;
        int count = 1;
        int j = i;

        // Calculate the special sum starting from index i
        while (j + count <= n) {
            for (int k = 0; k < count; k++) {
                specialSum += arr[j + k];
            }
            j += count;
            count++;
        }

        // Check if the current special sum is the maximum
        if (specialSum > maxSpecialSum) {
            maxSpecialSum = specialSum;
            bestIndex = i;
        }
    }

    return maxSpecialSum;
}

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int result = findBestIndex(arr, n);
    cout << "The maximum special sum is: " << result << endl;

    return 0;
}
